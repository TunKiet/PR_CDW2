import React, { useState, useEffect } from "react";
// Import CSS files
import "./HomePage.css";
import "./ReservationForm.css";

// H√†m ti·ªán √≠ch ƒë·ªÉ ƒë·ªãnh d·∫°ng ti·ªÅn t·ªá
const formatCurrency = (amount) =>
  new Intl.NumberFormat("vi-VN", { style: "currency", currency: "VND" }).format(
    amount
  );

// ===================================================================
// ReservationForm Component
// ===================================================================

function ReservationForm({ cart, onClose, formatCurrency }) {
  const [formData, setFormData] = useState({
    name: "",
    phone: "",
    email: "",
    date: "",
    time: "19:00", // Gi√° tr·ªã m·∫∑c ƒë·ªãnh
    guests: 1,
    seating_area: "",
    notes: "",
  });

  // T√≠nh t·ªïng ti·ªÅn v√† ti·ªÅn ƒë·∫∑t c·ªçc
  const total = cart.reduce((sum, item) => sum + item.price * item.quantity, 0);
  const deposit = total * 0.5;

  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    console.log("D·ªØ li·ªáu ƒë·∫∑t b√†n:", { ...formData, cart, total, deposit });
    alert("‚úÖ Y√™u c·∫ßu ƒë·∫∑t b√†n ƒë√£ ƒë∆∞·ª£c g·ª≠i!");
    onClose(); // ƒê√≥ng form sau khi g·ª≠i
  };

  // Kh√≥a scroll khi form m·ªü
  useEffect(() => {
    document.body.style.overflow = "hidden";
    return () => (document.body.style.overflow = "auto");
  }, []);
  
  // Thi·∫øt l·∫≠p ng√†y t·ªëi thi·ªÉu l√† h√¥m nay
  const today = new Date().toISOString().split('T')[0];

  return (
    <div className="reservation-overlay" onClick={onClose}>
      <div
        className="reservation-box"
        onClick={(e) => e.stopPropagation()}
      >
        <button className="close-btn" onClick={onClose}>
            &times;
        </button>
        <h2 className="reservation-title">ƒê·∫∑t B√†n Ngay</h2>
        <form onSubmit={handleSubmit}>
          <div className="form-grid">
            {/* ...C√°c tr∆∞·ªùng input kh√°c (gi·ªØ nguy√™n) ... */}
            <div>
              <label>T√™n c·ªßa b·∫°n *</label>
              <input name="name" value={formData.name} onChange={handleChange} required placeholder="Nguy·ªÖn VƒÉn A" />
            </div>
            <div>
              <label>S·ªë ƒëi·ªán tho·∫°i *</label>
              <input name="phone" value={formData.phone} onChange={handleChange} required placeholder="090 123 4567" />
            </div>
            <div className="full">
              <label>Email</label>
              <input name="email" type="email" value={formData.email} onChange={handleChange} placeholder="email@example.com" />
            </div>
            <div>
              <label>Ng√†y ƒë·∫∑t *</label>
              <input name="date" type="date" value={formData.date} onChange={handleChange} required min={today} />
            </div>
            <div>
              <label>Gi·ªù ƒë·∫∑t *</label>
              <input name="time" type="time" value={formData.time} onChange={handleChange} required />
            </div>
            <div className="full">
              <label>S·ªë l∆∞·ª£ng kh√°ch *</label>
              <input name="guests" type="number" min="1" value={formData.guests} onChange={handleChange} required />
            </div>
          </div>

          <fieldset className="seating">
            <legend>Khu v·ª±c ch·ªó ng·ªìi *</legend>
            <div className="seating-options">
              {["Trong nh√†", "Ngo√†i tr·ªùi", "Ph√≤ng VIP"].map((area) => (
                <label key={area}>
                  <input type="radio" name="seating_area" value={area} checked={formData.seating_area === area} onChange={handleChange} required />
                  <span>{area}</span>
                </label>
              ))}
            </div>
          </fieldset>

          {/* T√≥m t·∫Øt ƒë·∫∑t m√≥n tr∆∞·ªõc (n·∫øu c√≥) */}
          {cart.length > 0 && (
            <div className="preorder-summary">
              <h3>üçΩÔ∏è T√≥m T·∫Øt ƒê·∫∑t M√≥n Tr∆∞·ªõc</h3>
              <p>T·ªïng gi√° tr·ªã ƒë∆°n h√†ng: <strong>{formatCurrency(total)}</strong></p>
              <p>C·∫ßn thanh to√°n tr∆∞·ªõc (50%): <strong className="text-red">{formatCurrency(deposit)}</strong></p>
            </div>
          )}

          <div className="notes">
            <label>Ghi ch√∫</label>
            <textarea name="notes" rows="3" value={formData.notes} onChange={handleChange} placeholder="V√≠ d·ª•: B√†n y√™n tƒ©nh, c·∫ßn gh·∫ø tr·∫ª em..." />
          </div>

          <button type="submit" className="submit-btn">
            G·ª≠i Y√™u C·∫ßu ƒê·∫∑t B√†n
          </button>
        </form>
      </div>
    </div>
  );
}

// ===================================================================
// HomePage Component
// ===================================================================

export default function HomePage() {
  const [cart, setCart] = useState([]);
  const [showCart, setShowCart] = useState(false);
  const [showReservation, setShowReservation] = useState(false); // State ƒëi·ªÅu khi·ªÉn form ƒë·∫∑t b√†n
  const [toast, setToast] = useState(null);

  const todayMenu = [
    { id: 1, name: "Ph·ªü B√≤ ƒê·∫∑c Bi·ªát", price: 65000, img: "https://placehold.co/250x180/f87171/fff?text=Ph·ªü+B√≤" },
    { id: 2, name: "B√∫n Ch·∫£ H√† N·ªôi", price: 55000, img: "https://placehold.co/250x180/60a5fa/fff?text=B√∫n+Ch·∫£" },
    { id: 3, name: "C∆°m T·∫•m S∆∞·ªùn N∆∞·ªõng", price: 50000, img: "https://placehold.co/250x180/facc15/000?text=C∆°m+T·∫•m" },
  ];
  
  // D·ªØ li·ªáu ∆Øu ƒë√£i m·∫´u
  const promotions = [
    { id: 1, title: "Gi·∫£m 20% Cho Th·ª© Ba", desc: "Gi·∫£m 20% t·ªïng h√≥a ƒë∆°n cho kh√°ch ƒë·∫∑t b√†n qua website v√†o c√°c ng√†y Th·ª© Ba h√†ng tu·∫ßn.", color: "#3b82f6" },
    { id: 2, title: "T·∫∑ng Cocktail ƒê·∫∑c Tr∆∞ng", desc: "T·∫∑ng ngay 1 ly cocktail 'Sunset Dream' ƒë·∫∑c tr∆∞ng khi ƒë·∫∑t ch·ªó cho nh√≥m 4 ng∆∞·ªùi tr·ªü l√™n.", color: "#10b981" },
    { id: 3, title: "Mi·ªÖn Ph√≠ Ph√≤ng VIP", desc: "Mi·ªÖn ph√≠ ph√≠ s·ª≠ d·ª•ng Ph√≤ng VIP cho h√≥a ƒë∆°n tr√™n 5.000.000 VNƒê. Th√≠ch h·ª£p cho c√°c bu·ªïi ti·ªác ri√™ng t∆∞.", color: "#f97316" },
  ];

  const addToCart = (dish) => {
    setCart((prev) => {
      const existing = prev.find((item) => item.id === dish.id);
      if (existing) {
        return prev.map((item) =>
          item.id === dish.id ? { ...item, quantity: item.quantity + 1 } : item
        );
      } else {
        return [...prev, { ...dish, quantity: 1 }];
      }
    });
    setToast(`‚úÖ ƒê√£ th√™m ${dish.name} v√†o gi·ªè h√†ng`);
    setTimeout(() => setToast(null), 2000);
  };

  const updateQuantity = (id, amount) => {
    setCart((prev) =>
      prev
        .map((item) =>
          item.id === id ? { ...item, quantity: item.quantity + amount } : item
        )
        .filter((item) => item.quantity > 0)
    );
  };

  const totalAmount = cart.reduce(
    (sum, item) => sum + item.price * item.quantity,
    0
  );

  return (
    <div className="home-container">
      {/* Navbar */}
      <header className="home-header">
        <nav className="home-navbar">
          <div className="nav-logo">üçú Nh√† H√†ng Nh√≥m D</div>
          <ul className="nav-links">
            <li><a href="#home">Trang ch·ªß</a></li>
            <li><a href="#menu">Th·ª±c ƒë∆°n</a></li>
            <li><a href="#promotions">∆Øu ƒë√£i</a></li>
            <li><a href="#reservation" className="btn-nav">ƒê·∫∑t b√†n</a></li>
          </ul>
          <div className="cart-icon" onClick={() => setShowCart(!showCart)}>
            üõí <span>{cart.reduce((sum, item) => sum + item.quantity, 0)}</span>
          </div>
        </nav>
      </header>

      {/* Banner */}
      <section id="home" className="home-banner">
        <div className="banner-content">
          <h1>Ch√†o m·ª´ng ƒë·∫øn v·ªõi Nh√† h√†ng Nh√≥m D</h1>
          <p>Th∆∞·ªüng th·ª©c ·∫©m th·ª±c Vi·ªát Nam v·ªõi h∆∞∆°ng v·ªã truy·ªÅn th·ªëng</p>
          <a href="#menu" className="btn-primary">Xem th·ª±c ƒë∆°n</a>
        </div>
      </section>

      {/* Menu Section */}
      <section id="menu" className="menu-section">
        <h2>Th·ª±c ƒê∆°n H√¥m Nay</h2>
        <div className="menu-grid">
          {todayMenu.map((dish) => (
            <div className="menu-item" key={dish.id}>
              <img src={dish.img} alt={dish.name} />
              <h3>{dish.name}</h3>
              <p>{formatCurrency(dish.price)}</p>
              <button className="btn-add" onClick={() => addToCart(dish)}>
                + ƒê·∫∑t m√≥n
              </button>
            </div>
          ))}
        </div>
      </section>
      
      {/* Promotions Section (M·∫´u) */}
      <section id="promotions" className="promo-section">
        <h2>∆Øu ƒê√£i ƒê·∫∑c Bi·ªát ‚ú®</h2>
        <div className="promo-grid">
            {promotions.map(promo => (
                <div key={promo.id} className="promo-item" style={{borderTopColor: promo.color}}>
                    <h3>{promo.title}</h3>
                    <p>{promo.desc}</p>
                    <a href="#reservation" className="btn-promo">ƒê·∫∑t ch·ªó ngay</a>
                </div>
            ))}
        </div>
      </section>
      
      {/* Reservation Anchor (Ph·∫ßn neo ƒë·∫∑t b√†n) */}
      <section id="reservation" className="reservation-anchor">
        <h2>S·∫µn s√†ng th∆∞·ªüng th·ª©c?</h2>
        <button 
            className="btn-primary"
            onClick={() => setShowReservation(true)}
        >
            ƒê·∫∑t B√†n Ngay! 
        </button>
      </section>

      {/* Gi·ªè h√†ng popup */}
      {showCart && (
        <div className="cart-popup">
          <div className="cart-box">
            <h3>üõçÔ∏è Gi·ªè h√†ng</h3>
            <button className="close-btn" onClick={() => setShowCart(false)}>&times;</button>
            {cart.length === 0 ? (
              <p>Ch∆∞a c√≥ m√≥n n√†o.</p>
            ) : (
              <>
                <ul>
                  {cart.map((item) => (
                    <li key={item.id}>
                      <span>{item.name}</span>
                      <div className="quantity-control">
                        <button onClick={() => updateQuantity(item.id, -1)}>-</button>
                        <span>{item.quantity}</span>
                        <button onClick={() => updateQuantity(item.id, 1)}>+</button>
                      </div>
                      <span>{formatCurrency(item.price * item.quantity)}</span>
                    </li>
                  ))}
                </ul>
                <p className="cart-total">T·ªïng c·ªông: {formatCurrency(totalAmount)}</p>
                <div className="cart-actions">
                  <button className="checkout-btn">Thanh to√°n</button>
                  <button 
                    className="book-btn"
                    onClick={() => {
                        setShowCart(false); 
                        setShowReservation(true); 
                    }}
                  >
                    ƒê·∫∑t b√†n
                  </button>
                </div>
              </>
            )}
          </div>
        </div>
      )}

      {/* Reservation Form Popup */}
      {showReservation && (
        <ReservationForm
          cart={cart}
          onClose={() => setShowReservation(false)}
          formatCurrency={formatCurrency}
        />
      )}

      {/* Toast th√¥ng b√°o */}
      {toast && <div className="toast">{toast}</div>}

      {/* Footer */}
      <footer className="home-footer">
        <p>¬© 2024 Nh√† h√†ng Nh√≥m D. All rights reserved.</p>
      </footer>
    </div>
  );
}