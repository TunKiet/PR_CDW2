import React, { useState } from 'react';
import Sidebar from '../components/Sidebar';
import OrderDetailsModal from '../components/OrderDetailsModal';
import OrderTable from '../components/OrderTable';

const initialOrdersData = [
    { id: 'DH1001', table: 'B√†n 05', total: 155000, status: 'Ch·ªù x·ª≠ l√Ω', time: '10:30', notes: 'Kh√°ch y√™u c·∫ßu √≠t ƒë∆∞·ªùng.', statusColor: 'bg-yellow-100 text-yellow-700', items: [
        { name: 'Ph·ªü B√≤', price: 55000, quantity: 2 },
        { name: 'Tr√† Chanh', price: 20000, quantity: 2 },
        { name: 'N∆∞·ªõc D·ª´a', price: 20000, quantity: 1 }
    ] },
    { id: 'DH1002', table: 'Mang v·ªÅ', total: 60000, status: 'ƒêang ph·ª•c v·ª•', time: '10:45', notes: 'G√≥i mang ƒëi.', statusColor: 'bg-blue-100 text-blue-700', items: [
        { name: 'B√∫n Ch·∫£', price: 45000, quantity: 1 },
        { name: 'C√† Ph√™ S·ªØa ƒê√°', price: 25000, quantity: 1 }
    ] },
    { id: 'DH1003', table: 'B√†n 01', total: 110000, status: 'ƒê√£ thanh to√°n', time: '09:50', notes: '', statusColor: 'bg-green-100 text-green-700', items: [] },
    { id: 'DH1004', table: 'B√†n 12', total: 0, status: 'ƒê√£ h·ªßy', time: '09:00', notes: 'Kh√°ch h·ªßy ƒë∆°n.', statusColor: 'bg-red-100 text-red-700', items: [] },
];

const OrderManagementPage = () => {
    const [selectedOrder, setSelectedOrder] = useState(null);
    const [currentOrders, setCurrentOrders] = useState(initialOrdersData);
    const [searchTerm, setSearchTerm] = useState(""); // üîç T·ª´ kh√≥a t√¨m ki·∫øm

    // H√†m m·ªü modal chi ti·∫øt
    const handleViewDetails = (order) => {
        setSelectedOrder(JSON.parse(JSON.stringify(order)));
    };

    // H√†m l∆∞u ch·ªânh s·ª≠a
    const handleSaveOrder = (updatedOrder) => {
        setCurrentOrders(prevOrders =>
            prevOrders.map(order =>
                order.id === updatedOrder.id ? updatedOrder : order
            )
        );
        setSelectedOrder(null);
    };

    // Ho√†n th√†nh ƒë∆°n
    const handleCompleteOrder = (orderId) => {
        setCurrentOrders(prevOrders =>
            prevOrders.map(order => {
                if (order.id === orderId) {
                    return {
                        ...order,
                        status: 'ƒê√£ thanh to√°n',
                        statusColor: 'bg-green-100 text-green-700',
                        total: order.total
                    };
                }
                return order;
            })
        );
        setSelectedOrder(null);
    };

    // üîç L·ªçc ƒë∆°n h√†ng theo t·ª´ kh√≥a
    const filteredOrders = currentOrders.filter(order =>
        order.id.toLowerCase().includes(searchTerm.toLowerCase()) ||
        order.table.toLowerCase().includes(searchTerm.toLowerCase()) ||
        order.status.toLowerCase().includes(searchTerm.toLowerCase())
    );

    return (
        <div className="flex min-h-screen bg-gray-50">
            <Sidebar />

            <div className="flex-1 ml-64 p-6">
                {/* üîç Thanh t√¨m ki·∫øm */}
                <div className="mb-6 flex justify-between items-center">
                    <h1 className="text-2xl font-semibold text-gray-800">Qu·∫£n L√Ω ƒê∆°n H√†ng</h1>
                    <input
                        type="text"
                        placeholder="T√¨m ki·∫øm theo m√£, b√†n ho·∫∑c tr·∫°ng th√°i..."
                        value={searchTerm}
                        onChange={(e) => setSearchTerm(e.target.value)}
                        className="border border-gray-300 rounded-lg px-4 py-2 w-80 focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                </div>

                {/* B·∫£ng ƒë∆°n h√†ng */}
                <OrderTable
                    orders={filteredOrders} // ‚úÖ Hi·ªÉn th·ªã danh s√°ch ƒë√£ l·ªçc
                    onViewDetails={handleViewDetails}
                    onEdit={handleViewDetails}
                    onCompleteOrder={handleCompleteOrder}
                />
            </div>

            {/* Modal chi ti·∫øt */}
            {selectedOrder && (
                <OrderDetailsModal
                    order={selectedOrder}
                    onClose={() => setSelectedOrder(null)}
                    onSave={handleSaveOrder}
                    onCompleteOrder={handleCompleteOrder}
                />
            )}
        </div>
    );
};

export default OrderManagementPage;
